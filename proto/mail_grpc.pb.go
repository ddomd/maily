// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: Proto/mail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MailyService_CreateEmail_FullMethodName    = "/proto.MailyService/CreateEmail"
	MailyService_GetEmail_FullMethodName       = "/proto.MailyService/GetEmail"
	MailyService_GetBatchEmails_FullMethodName = "/proto.MailyService/GetBatchEmails"
	MailyService_UpdateEmail_FullMethodName    = "/proto.MailyService/UpdateEmail"
	MailyService_DeleteEmail_FullMethodName    = "/proto.MailyService/DeleteEmail"
)

// MailyServiceClient is the client API for MailyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailyServiceClient interface {
	CreateEmail(ctx context.Context, in *CreateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	GetBatchEmails(ctx context.Context, in *GetEmailBatchRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
}

type mailyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailyServiceClient(cc grpc.ClientConnInterface) MailyServiceClient {
	return &mailyServiceClient{cc}
}

func (c *mailyServiceClient) CreateEmail(ctx context.Context, in *CreateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, MailyService_CreateEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailyServiceClient) GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, MailyService_GetEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailyServiceClient) GetBatchEmails(ctx context.Context, in *GetEmailBatchRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error) {
	out := new(EmailBatchResponse)
	err := c.cc.Invoke(ctx, MailyService_GetBatchEmails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailyServiceClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, MailyService_UpdateEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailyServiceClient) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, MailyService_DeleteEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailyServiceServer is the server API for MailyService service.
// All implementations must embed UnimplementedMailyServiceServer
// for forward compatibility
type MailyServiceServer interface {
	CreateEmail(context.Context, *CreateEmailRequest) (*EmailResponse, error)
	GetEmail(context.Context, *GetEmailRequest) (*EmailResponse, error)
	GetBatchEmails(context.Context, *GetEmailBatchRequest) (*EmailBatchResponse, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailResponse, error)
	DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailResponse, error)
	mustEmbedUnimplementedMailyServiceServer()
}

// UnimplementedMailyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailyServiceServer struct {
}

func (UnimplementedMailyServiceServer) CreateEmail(context.Context, *CreateEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmail not implemented")
}
func (UnimplementedMailyServiceServer) GetEmail(context.Context, *GetEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmail not implemented")
}
func (UnimplementedMailyServiceServer) GetBatchEmails(context.Context, *GetEmailBatchRequest) (*EmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchEmails not implemented")
}
func (UnimplementedMailyServiceServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedMailyServiceServer) DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmail not implemented")
}
func (UnimplementedMailyServiceServer) mustEmbedUnimplementedMailyServiceServer() {}

// UnsafeMailyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailyServiceServer will
// result in compilation errors.
type UnsafeMailyServiceServer interface {
	mustEmbedUnimplementedMailyServiceServer()
}

func RegisterMailyServiceServer(s grpc.ServiceRegistrar, srv MailyServiceServer) {
	s.RegisterService(&MailyService_ServiceDesc, srv)
}

func _MailyService_CreateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailyServiceServer).CreateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailyService_CreateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailyServiceServer).CreateEmail(ctx, req.(*CreateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailyService_GetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailyServiceServer).GetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailyService_GetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailyServiceServer).GetEmail(ctx, req.(*GetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailyService_GetBatchEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailyServiceServer).GetBatchEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailyService_GetBatchEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailyServiceServer).GetBatchEmails(ctx, req.(*GetEmailBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailyService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailyServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailyService_UpdateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailyServiceServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailyService_DeleteEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailyServiceServer).DeleteEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailyService_DeleteEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailyServiceServer).DeleteEmail(ctx, req.(*DeleteEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailyService_ServiceDesc is the grpc.ServiceDesc for MailyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MailyService",
	HandlerType: (*MailyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmail",
			Handler:    _MailyService_CreateEmail_Handler,
		},
		{
			MethodName: "GetEmail",
			Handler:    _MailyService_GetEmail_Handler,
		},
		{
			MethodName: "GetBatchEmails",
			Handler:    _MailyService_GetBatchEmails_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _MailyService_UpdateEmail_Handler,
		},
		{
			MethodName: "DeleteEmail",
			Handler:    _MailyService_DeleteEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/mail.proto",
}
