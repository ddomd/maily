// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: Proto/mail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manage_CreateEmail_FullMethodName             = "/proto.Manage/CreateEmail"
	Manage_GetEmail_FullMethodName                = "/proto.Manage/GetEmail"
	Manage_GetAll_FullMethodName                  = "/proto.Manage/GetAll"
	Manage_GetAllSubscribed_FullMethodName        = "/proto.Manage/GetAllSubscribed"
	Manage_GetBatchSubscribed_FullMethodName      = "/proto.Manage/GetBatchSubscribed"
	Manage_GetBatch_FullMethodName                = "/proto.Manage/GetBatch"
	Manage_UpdateEmail_FullMethodName             = "/proto.Manage/UpdateEmail"
	Manage_DeleteEmail_FullMethodName             = "/proto.Manage/DeleteEmail"
	Manage_DeleteUnsubscribed_FullMethodName      = "/proto.Manage/DeleteUnsubscribed"
	Manage_DeleteUsubscribedBefore_FullMethodName = "/proto.Manage/DeleteUsubscribedBefore"
)

// ManageClient is the client API for Manage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageClient interface {
	CreateEmail(ctx context.Context, in *CreateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error)
	GetAllSubscribed(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error)
	GetBatchSubscribed(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error)
	GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	DeleteUnsubscribed(ctx context.Context, in *DeleteUnsubscribedRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error)
	DeleteUsubscribedBefore(ctx context.Context, in *DeleteUnsubscribedBeforeRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error)
}

type manageClient struct {
	cc grpc.ClientConnInterface
}

func NewManageClient(cc grpc.ClientConnInterface) ManageClient {
	return &manageClient{cc}
}

func (c *manageClient) CreateEmail(ctx context.Context, in *CreateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, Manage_CreateEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, Manage_GetEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error) {
	out := new(EmailBatchResponse)
	err := c.cc.Invoke(ctx, Manage_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetAllSubscribed(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error) {
	out := new(EmailBatchResponse)
	err := c.cc.Invoke(ctx, Manage_GetAllSubscribed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetBatchSubscribed(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error) {
	out := new(EmailBatchResponse)
	err := c.cc.Invoke(ctx, Manage_GetBatchSubscribed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error) {
	out := new(EmailBatchResponse)
	err := c.cc.Invoke(ctx, Manage_GetBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, Manage_UpdateEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, Manage_DeleteEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DeleteUnsubscribed(ctx context.Context, in *DeleteUnsubscribedRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error) {
	out := new(EmailBatchResponse)
	err := c.cc.Invoke(ctx, Manage_DeleteUnsubscribed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DeleteUsubscribedBefore(ctx context.Context, in *DeleteUnsubscribedBeforeRequest, opts ...grpc.CallOption) (*EmailBatchResponse, error) {
	out := new(EmailBatchResponse)
	err := c.cc.Invoke(ctx, Manage_DeleteUsubscribedBefore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServer is the server API for Manage service.
// All implementations must embed UnimplementedManageServer
// for forward compatibility
type ManageServer interface {
	CreateEmail(context.Context, *CreateEmailRequest) (*EmailResponse, error)
	GetEmail(context.Context, *GetEmailRequest) (*EmailResponse, error)
	GetAll(context.Context, *GetAllRequest) (*EmailBatchResponse, error)
	GetAllSubscribed(context.Context, *GetAllRequest) (*EmailBatchResponse, error)
	GetBatchSubscribed(context.Context, *GetBatchRequest) (*EmailBatchResponse, error)
	GetBatch(context.Context, *GetBatchRequest) (*EmailBatchResponse, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailResponse, error)
	DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailResponse, error)
	DeleteUnsubscribed(context.Context, *DeleteUnsubscribedRequest) (*EmailBatchResponse, error)
	DeleteUsubscribedBefore(context.Context, *DeleteUnsubscribedBeforeRequest) (*EmailBatchResponse, error)
	mustEmbedUnimplementedManageServer()
}

// UnimplementedManageServer must be embedded to have forward compatible implementations.
type UnimplementedManageServer struct {
}

func (UnimplementedManageServer) CreateEmail(context.Context, *CreateEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmail not implemented")
}
func (UnimplementedManageServer) GetEmail(context.Context, *GetEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmail not implemented")
}
func (UnimplementedManageServer) GetAll(context.Context, *GetAllRequest) (*EmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedManageServer) GetAllSubscribed(context.Context, *GetAllRequest) (*EmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubscribed not implemented")
}
func (UnimplementedManageServer) GetBatchSubscribed(context.Context, *GetBatchRequest) (*EmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchSubscribed not implemented")
}
func (UnimplementedManageServer) GetBatch(context.Context, *GetBatchRequest) (*EmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedManageServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedManageServer) DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmail not implemented")
}
func (UnimplementedManageServer) DeleteUnsubscribed(context.Context, *DeleteUnsubscribedRequest) (*EmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnsubscribed not implemented")
}
func (UnimplementedManageServer) DeleteUsubscribedBefore(context.Context, *DeleteUnsubscribedBeforeRequest) (*EmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsubscribedBefore not implemented")
}
func (UnimplementedManageServer) mustEmbedUnimplementedManageServer() {}

// UnsafeManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServer will
// result in compilation errors.
type UnsafeManageServer interface {
	mustEmbedUnimplementedManageServer()
}

func RegisterManageServer(s grpc.ServiceRegistrar, srv ManageServer) {
	s.RegisterService(&Manage_ServiceDesc, srv)
}

func _Manage_CreateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).CreateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_CreateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).CreateEmail(ctx, req.(*CreateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_GetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetEmail(ctx, req.(*GetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetAllSubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetAllSubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_GetAllSubscribed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetAllSubscribed(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetBatchSubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetBatchSubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_GetBatchSubscribed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetBatchSubscribed(ctx, req.(*GetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_GetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetBatch(ctx, req.(*GetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_UpdateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DeleteEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DeleteEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_DeleteEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DeleteEmail(ctx, req.(*DeleteEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DeleteUnsubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnsubscribedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DeleteUnsubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_DeleteUnsubscribed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DeleteUnsubscribed(ctx, req.(*DeleteUnsubscribedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DeleteUsubscribedBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnsubscribedBeforeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DeleteUsubscribedBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manage_DeleteUsubscribedBefore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DeleteUsubscribedBefore(ctx, req.(*DeleteUnsubscribedBeforeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manage_ServiceDesc is the grpc.ServiceDesc for Manage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Manage",
	HandlerType: (*ManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmail",
			Handler:    _Manage_CreateEmail_Handler,
		},
		{
			MethodName: "GetEmail",
			Handler:    _Manage_GetEmail_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Manage_GetAll_Handler,
		},
		{
			MethodName: "GetAllSubscribed",
			Handler:    _Manage_GetAllSubscribed_Handler,
		},
		{
			MethodName: "GetBatchSubscribed",
			Handler:    _Manage_GetBatchSubscribed_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _Manage_GetBatch_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Manage_UpdateEmail_Handler,
		},
		{
			MethodName: "DeleteEmail",
			Handler:    _Manage_DeleteEmail_Handler,
		},
		{
			MethodName: "DeleteUnsubscribed",
			Handler:    _Manage_DeleteUnsubscribed_Handler,
		},
		{
			MethodName: "DeleteUsubscribedBefore",
			Handler:    _Manage_DeleteUsubscribedBefore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/mail.proto",
}
